// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth.proto

It has these top-level messages:
	TokenGenerateRequest
	TokenGenerateResponse
	TokenCheckRequest
	TokenCheckResponse
	UserProfileRequest
	UserProfileResponse
	AuthProfile
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TokenGenerateRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=pass" json:"pass,omitempty"`
}

func (m *TokenGenerateRequest) Reset()                    { *m = TokenGenerateRequest{} }
func (m *TokenGenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenGenerateRequest) ProtoMessage()               {}
func (*TokenGenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TokenGenerateResponse struct {
	Exists bool   `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Auth   string `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
}

func (m *TokenGenerateResponse) Reset()                    { *m = TokenGenerateResponse{} }
func (m *TokenGenerateResponse) String() string            { return proto.CompactTextString(m) }
func (*TokenGenerateResponse) ProtoMessage()               {}
func (*TokenGenerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TokenCheckRequest struct {
	Auth string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (m *TokenCheckRequest) Reset()                    { *m = TokenCheckRequest{} }
func (m *TokenCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenCheckRequest) ProtoMessage()               {}
func (*TokenCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TokenCheckResponse struct {
	Valid   bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Expired bool   `protobuf:"varint,2,opt,name=expired" json:"expired,omitempty"`
	User    string `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
}

func (m *TokenCheckResponse) Reset()                    { *m = TokenCheckResponse{} }
func (m *TokenCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*TokenCheckResponse) ProtoMessage()               {}
func (*TokenCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UserProfileRequest struct {
	Auth string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (m *UserProfileRequest) Reset()                    { *m = UserProfileRequest{} }
func (m *UserProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UserProfileRequest) ProtoMessage()               {}
func (*UserProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type UserProfileResponse struct {
	Exists  bool         `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Profile *AuthProfile `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *UserProfileResponse) Reset()                    { *m = UserProfileResponse{} }
func (m *UserProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UserProfileResponse) ProtoMessage()               {}
func (*UserProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserProfileResponse) GetProfile() *AuthProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type AuthProfile struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *AuthProfile) Reset()                    { *m = AuthProfile{} }
func (m *AuthProfile) String() string            { return proto.CompactTextString(m) }
func (*AuthProfile) ProtoMessage()               {}
func (*AuthProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*TokenGenerateRequest)(nil), "auth.TokenGenerateRequest")
	proto.RegisterType((*TokenGenerateResponse)(nil), "auth.TokenGenerateResponse")
	proto.RegisterType((*TokenCheckRequest)(nil), "auth.TokenCheckRequest")
	proto.RegisterType((*TokenCheckResponse)(nil), "auth.TokenCheckResponse")
	proto.RegisterType((*UserProfileRequest)(nil), "auth.UserProfileRequest")
	proto.RegisterType((*UserProfileResponse)(nil), "auth.UserProfileResponse")
	proto.RegisterType((*AuthProfile)(nil), "auth.AuthProfile")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Token service

type TokenClient interface {
	// Generate generates an auth token.
	Generate(ctx context.Context, in *TokenGenerateRequest, opts ...client.CallOption) (*TokenGenerateResponse, error)
	// Check tests the auth string for validity.
	Check(ctx context.Context, in *TokenCheckRequest, opts ...client.CallOption) (*TokenCheckResponse, error)
}

type tokenClient struct {
	c           client.Client
	serviceName string
}

func NewTokenClient(serviceName string, c client.Client) TokenClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &tokenClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *tokenClient) Generate(ctx context.Context, in *TokenGenerateRequest, opts ...client.CallOption) (*TokenGenerateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Token.Generate", in)
	out := new(TokenGenerateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) Check(ctx context.Context, in *TokenCheckRequest, opts ...client.CallOption) (*TokenCheckResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Token.Check", in)
	out := new(TokenCheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Token service

type TokenHandler interface {
	// Generate generates an auth token.
	Generate(context.Context, *TokenGenerateRequest, *TokenGenerateResponse) error
	// Check tests the auth string for validity.
	Check(context.Context, *TokenCheckRequest, *TokenCheckResponse) error
}

func RegisterTokenHandler(s server.Server, hdlr TokenHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Token{hdlr}, opts...))
}

type Token struct {
	TokenHandler
}

func (h *Token) Generate(ctx context.Context, in *TokenGenerateRequest, out *TokenGenerateResponse) error {
	return h.TokenHandler.Generate(ctx, in, out)
}

func (h *Token) Check(ctx context.Context, in *TokenCheckRequest, out *TokenCheckResponse) error {
	return h.TokenHandler.Check(ctx, in, out)
}

// Client API for User service

type UserClient interface {
	// UserProfile returns a user profile.
	Profile(ctx context.Context, in *UserProfileRequest, opts ...client.CallOption) (*UserProfileResponse, error)
}

type userClient struct {
	c           client.Client
	serviceName string
}

func NewUserClient(serviceName string, c client.Client) UserClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &userClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userClient) Profile(ctx context.Context, in *UserProfileRequest, opts ...client.CallOption) (*UserProfileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "User.Profile", in)
	out := new(UserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	// UserProfile returns a user profile.
	Profile(context.Context, *UserProfileRequest, *UserProfileResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&User{hdlr}, opts...))
}

type User struct {
	UserHandler
}

func (h *User) Profile(ctx context.Context, in *UserProfileRequest, out *UserProfileResponse) error {
	return h.UserHandler.Profile(ctx, in, out)
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x25, 0xda, 0x8f, 0x38, 0x3d, 0x75, 0xac, 0x1a, 0xe3, 0x45, 0x72, 0xb1, 0x20, 0xf4, 0x10,
	0xf1, 0xe2, 0xa1, 0x20, 0x01, 0xbd, 0x4a, 0x50, 0x10, 0x6f, 0xd1, 0x8e, 0x24, 0xb4, 0x26, 0x71,
	0x77, 0x23, 0xfd, 0x09, 0xfe, 0x6c, 0xd9, 0xd9, 0xac, 0xae, 0x36, 0xea, 0x6d, 0x3e, 0xde, 0xbe,
	0x99, 0x79, 0x6f, 0x01, 0xb2, 0x46, 0xe5, 0xb3, 0x5a, 0x54, 0xaa, 0xc2, 0x9e, 0x8e, 0xa3, 0x39,
	0x4c, 0x6e, 0xab, 0x25, 0x95, 0xd7, 0x54, 0x92, 0xc8, 0x14, 0xa5, 0xf4, 0xda, 0x90, 0x54, 0x88,
	0xd0, 0x6b, 0x24, 0x89, 0xc0, 0x3b, 0xf6, 0xa6, 0x3b, 0x29, 0xc7, 0xba, 0x56, 0x67, 0x52, 0x06,
	0x5b, 0xa6, 0xa6, 0xe3, 0x28, 0x81, 0xbd, 0x1f, 0xef, 0x65, 0x5d, 0x95, 0x92, 0x70, 0x1f, 0x06,
	0xb4, 0x2e, 0xa4, 0x92, 0x4c, 0xe1, 0xa7, 0x6d, 0xa6, 0x49, 0xf4, 0x60, 0x4b, 0xc2, 0x4b, 0x9c,
	0xc0, 0x98, 0x49, 0x92, 0x9c, 0x9e, 0x96, 0xce, 0x06, 0x0c, 0xf4, 0x1c, 0xe0, 0x3d, 0xa0, 0x0b,
	0x6c, 0x47, 0x4d, 0xa0, 0xff, 0x96, 0xad, 0x8a, 0x45, 0x3b, 0xc9, 0x24, 0x18, 0xc0, 0x90, 0xd6,
	0x75, 0x21, 0x68, 0xc1, 0xb3, 0xfc, 0xd4, 0xa6, 0x9f, 0xb7, 0x6d, 0x7f, 0xdd, 0x16, 0x4d, 0x01,
	0xef, 0x24, 0x89, 0x1b, 0x51, 0x3d, 0x17, 0x2b, 0xfa, 0x6b, 0x87, 0x07, 0xd8, 0xfd, 0x86, 0xfc,
	0xe7, 0xde, 0x53, 0x18, 0xd6, 0x06, 0xca, 0x6b, 0x8c, 0xe2, 0xf1, 0x8c, 0x4d, 0xb8, 0x6c, 0x54,
	0x6e, 0x39, 0x2c, 0x22, 0x3a, 0x87, 0x91, 0x53, 0xff, 0xcd, 0x84, 0x32, 0x7b, 0x21, 0xab, 0x9f,
	0x8e, 0xe3, 0x77, 0x0f, 0xfa, 0xac, 0x0b, 0x26, 0xe0, 0x5b, 0x27, 0x30, 0x34, 0x83, 0xba, 0xec,
	0x0d, 0x8f, 0x3a, 0x7b, 0xed, 0x29, 0x17, 0xd0, 0x67, 0x81, 0xf1, 0xc0, 0x41, 0xb9, 0xde, 0x84,
	0xc1, 0x66, 0xc3, 0xbc, 0x8d, 0xaf, 0xa0, 0xa7, 0xd5, 0xc1, 0x39, 0x0c, 0xed, 0x15, 0x2d, 0x78,
	0x53, 0xde, 0xf0, 0xb0, 0xa3, 0x63, 0x78, 0x1e, 0x07, 0xfc, 0x49, 0xcf, 0x3e, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x7b, 0x52, 0x0e, 0xe9, 0xb2, 0x02, 0x00, 0x00,
}
