// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth.proto

It has these top-level messages:
	GenerateRequest
	GenerateResponse
	CheckRequest
	CheckResponse
	ProfileRequest
	ProfileResponse
	AuthProfile
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GenerateRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=pass" json:"pass,omitempty"`
}

func (m *GenerateRequest) Reset()                    { *m = GenerateRequest{} }
func (m *GenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateRequest) ProtoMessage()               {}
func (*GenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GenerateResponse struct {
	Exists bool   `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Auth   string `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
}

func (m *GenerateResponse) Reset()                    { *m = GenerateResponse{} }
func (m *GenerateResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateResponse) ProtoMessage()               {}
func (*GenerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CheckRequest struct {
	Auth string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CheckResponse struct {
	Valid   bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Expired bool   `protobuf:"varint,2,opt,name=expired" json:"expired,omitempty"`
	User    string `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
}

func (m *CheckResponse) Reset()                    { *m = CheckResponse{} }
func (m *CheckResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse) ProtoMessage()               {}
func (*CheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ProfileRequest struct {
	Auth string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
}

func (m *ProfileRequest) Reset()                    { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()               {}
func (*ProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ProfileResponse struct {
	Exists  bool         `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Profile *AuthProfile `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *ProfileResponse) Reset()                    { *m = ProfileResponse{} }
func (m *ProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*ProfileResponse) ProtoMessage()               {}
func (*ProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ProfileResponse) GetProfile() *AuthProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type AuthProfile struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *AuthProfile) Reset()                    { *m = AuthProfile{} }
func (m *AuthProfile) String() string            { return proto.CompactTextString(m) }
func (*AuthProfile) ProtoMessage()               {}
func (*AuthProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*GenerateRequest)(nil), "GenerateRequest")
	proto.RegisterType((*GenerateResponse)(nil), "GenerateResponse")
	proto.RegisterType((*CheckRequest)(nil), "CheckRequest")
	proto.RegisterType((*CheckResponse)(nil), "CheckResponse")
	proto.RegisterType((*ProfileRequest)(nil), "ProfileRequest")
	proto.RegisterType((*ProfileResponse)(nil), "ProfileResponse")
	proto.RegisterType((*AuthProfile)(nil), "AuthProfile")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Generator service

type GeneratorClient interface {
	// Generate generates an auth token.
	Generate(ctx context.Context, in *GenerateRequest, opts ...client.CallOption) (*GenerateResponse, error)
}

type generatorClient struct {
	c           client.Client
	serviceName string
}

func NewGeneratorClient(serviceName string, c client.Client) GeneratorClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "generator"
	}
	return &generatorClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *generatorClient) Generate(ctx context.Context, in *GenerateRequest, opts ...client.CallOption) (*GenerateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Generator.Generate", in)
	out := new(GenerateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Generator service

type GeneratorHandler interface {
	// Generate generates an auth token.
	Generate(context.Context, *GenerateRequest, *GenerateResponse) error
}

func RegisterGeneratorHandler(s server.Server, hdlr GeneratorHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Generator{hdlr}, opts...))
}

type Generator struct {
	GeneratorHandler
}

func (h *Generator) Generate(ctx context.Context, in *GenerateRequest, out *GenerateResponse) error {
	return h.GeneratorHandler.Generate(ctx, in, out)
}

// Client API for Checker service

type CheckerClient interface {
	// Check tests the auth string for validity.
	Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error)
}

type checkerClient struct {
	c           client.Client
	serviceName string
}

func NewCheckerClient(serviceName string, c client.Client) CheckerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "checker"
	}
	return &checkerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *checkerClient) Check(ctx context.Context, in *CheckRequest, opts ...client.CallOption) (*CheckResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Checker.Check", in)
	out := new(CheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Checker service

type CheckerHandler interface {
	// Check tests the auth string for validity.
	Check(context.Context, *CheckRequest, *CheckResponse) error
}

func RegisterCheckerHandler(s server.Server, hdlr CheckerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Checker{hdlr}, opts...))
}

type Checker struct {
	CheckerHandler
}

func (h *Checker) Check(ctx context.Context, in *CheckRequest, out *CheckResponse) error {
	return h.CheckerHandler.Check(ctx, in, out)
}

// Client API for Profiler service

type ProfilerClient interface {
	// UserProfile returns a user profile.
	UserProfile(ctx context.Context, in *ProfileRequest, opts ...client.CallOption) (*ProfileResponse, error)
}

type profilerClient struct {
	c           client.Client
	serviceName string
}

func NewProfilerClient(serviceName string, c client.Client) ProfilerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "profiler"
	}
	return &profilerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *profilerClient) UserProfile(ctx context.Context, in *ProfileRequest, opts ...client.CallOption) (*ProfileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Profiler.UserProfile", in)
	out := new(ProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profiler service

type ProfilerHandler interface {
	// UserProfile returns a user profile.
	UserProfile(context.Context, *ProfileRequest, *ProfileResponse) error
}

func RegisterProfilerHandler(s server.Server, hdlr ProfilerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Profiler{hdlr}, opts...))
}

type Profiler struct {
	ProfilerHandler
}

func (h *Profiler) UserProfile(ctx context.Context, in *ProfileRequest, out *ProfileResponse) error {
	return h.ProfilerHandler.UserProfile(ctx, in, out)
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x99, 0xba, 0xb5, 0x7b, 0xdd, 0xd6, 0x1a, 0x44, 0x4a, 0x4f, 0x12, 0x64, 0x78, 0x8a,
	0x5a, 0xf1, 0x20, 0x0c, 0x41, 0x3c, 0x78, 0xd5, 0x8a, 0x7f, 0x40, 0x75, 0x4f, 0x5a, 0x9c, 0x6d,
	0x4c, 0x52, 0xd9, 0x9f, 0x2f, 0x49, 0x93, 0xad, 0x2b, 0xa8, 0xb7, 0xf7, 0x5e, 0xbf, 0xaf, 0x5f,
	0xde, 0x2f, 0x01, 0xc8, 0x1b, 0x55, 0x30, 0x2e, 0x6a, 0x55, 0xd3, 0x1b, 0x08, 0x1f, 0xb0, 0x42,
	0x91, 0x2b, 0xcc, 0xf0, 0xab, 0x41, 0xa9, 0x08, 0x81, 0x83, 0x46, 0xa2, 0x88, 0x07, 0x27, 0x83,
	0xb3, 0x71, 0x66, 0x6a, 0x3d, 0xe3, 0xb9, 0x94, 0xf1, 0x5e, 0x3b, 0xd3, 0x35, 0xbd, 0x85, 0x68,
	0x6b, 0x95, 0xbc, 0xae, 0x24, 0x92, 0x63, 0x18, 0xe1, 0xba, 0x94, 0x4a, 0x1a, 0xb7, 0x9f, 0xd9,
	0x4e, 0xfb, 0x75, 0xa8, 0xf3, 0xeb, 0x9a, 0x52, 0x98, 0xdc, 0x17, 0xf8, 0xf6, 0xd1, 0xc9, 0x35,
	0x9a, 0x41, 0x47, 0xf3, 0x0c, 0x53, 0xab, 0xb1, 0x01, 0x47, 0x30, 0xfc, 0xce, 0x57, 0xe5, 0xd2,
	0xfe, 0xbf, 0x6d, 0x48, 0x0c, 0x1e, 0xae, 0x79, 0x29, 0x70, 0x69, 0x12, 0xfc, 0xcc, 0xb5, 0x9b,
	0x65, 0xf6, 0xb7, 0xcb, 0xd0, 0x53, 0x98, 0x3d, 0x8a, 0xfa, 0xbd, 0x5c, 0xe1, 0x5f, 0xd1, 0x4f,
	0x10, 0x6e, 0x54, 0xff, 0x6c, 0x37, 0x07, 0x8f, 0xb7, 0x52, 0x13, 0x1f, 0xa4, 0x13, 0x76, 0xd7,
	0xa8, 0xc2, 0xd9, 0xdd, 0x47, 0x7a, 0x0d, 0x41, 0x67, 0xfe, 0x1b, 0xe8, 0x2a, 0xff, 0x44, 0x07,
	0x4a, 0xd7, 0xe9, 0x02, 0xc6, 0x16, 0x74, 0x2d, 0xc8, 0x39, 0xf8, 0x8e, 0x3a, 0x89, 0x58, 0xef,
	0xee, 0x92, 0x43, 0xd6, 0xbf, 0x92, 0xf4, 0x12, 0x3c, 0x83, 0x10, 0x05, 0x99, 0xc3, 0xd0, 0x94,
	0x64, 0xca, 0xba, 0xe4, 0x93, 0x19, 0xdb, 0x81, 0x9c, 0x2e, 0xc0, 0xb7, 0x67, 0x14, 0xe4, 0x02,
	0x82, 0x17, 0x89, 0xc2, 0x9d, 0x39, 0x64, 0xbb, 0xe8, 0x92, 0x88, 0xf5, 0x28, 0xbd, 0x8e, 0xcc,
	0xcb, 0xba, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0x41, 0xd5, 0x29, 0xbd, 0x67, 0x02, 0x00, 0x00,
}
